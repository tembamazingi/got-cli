# List all custom functions
.fn () {

  print -l ${(ok)functions[(I).*]}

}
# Archives - create new
.fn:a () {

  if [ "$#" -ne 0 ] ; then
    FILE="$1"
    case "$FILE" in
      *.tar.bz2|*.tbz2) shift && tar cvjf "$FILE" $* ;;
      *.tar.gz|*.tgz)   shift && tar cvzf "$FILE" $* ;;
      *.tar)            shift && tar cvf "$FILE" $* ;;
      *.zip)            shift && zip -r "$FILE" $* ;;
      *.rar)            shift && rar "$FILE" $* ;;
      *.7z)             shift && 7zr a "$FILE" $* ;;
      *)                echo "'$1' cannot be squeezed via squeeze()" ;;
    esac
  else
    echo "usage: squeeze [file] [contents]"
  fi

}

# Archives - Extract
.fn:a:x () {

  if [ $# -lt 1 ]
  then
    echo Usage: extract file
    return 1
  fi
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1    ;;
      *.tar.gz)    tar xvzf $1    ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xvf $1     ;;
      *.tbz2)      tar xvjf $1    ;;
      *.tgz)       tar xvzf $1    ;;
      *.zip)       unzip $1       ;;
      *.war|*.jar) unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)           echo "don't know how to extract '$1'..." ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi

}

# Files/Folders: Make folder and enter
.fn:d (){

  if [ -f "$1" ] ; then
    echo "File $1 exists~"
    return
  fi
  if [ ! -d "$1" ] ;then
    mkdir -p "$1"
    cd "$1"
  else
    echo "$1 exists~"
  fi

}

# Git - config
.fn:g:cnf () {

  git config --global user.name "$1" && git config --global user.email "$2"

}

# Git - link local repo to remote origin
.fn:g:ro () {

  git remote add origin "$1" && git branch -M main && git push -u origin main

}

# Git: Revert both the local and remote to a previous working commit.
.fn:g:rv ()
{

  git reset --hard $1 && git clean -f && git push -f origin $2

}

# Git: What changed in the last X days?
.fn:g:ch ()
{

  git whatchanged --abbrev-commit --since='$1'

}


# Git: Identify and start tracking all remote branches.
.fn:g:rb () {

  remote=origin;

  for brname in `git branch -r | grep $remote | grep -v /main | grep -v /HEAD | awk '{gsub(/^[^\/]+\//,"",$1); print $1}'`; do
    git branch --track $brname $remote/$brname || true;
  done

}

# Git: Find files in the repository that are redundant and not referenced anywhere in the application's code.
.fn:g:clean () {

  # Loop through all files in the specified directory
  for FILE in $(git ls-files ./$1); do
      # Check if the file is referenced anywhere in the application's code
      git grep $(basename "$FILE") > /dev/null || echo "$FILE is not referenced anywhere in the application's code and can probably be removed."
  done

}

# Git: Delete stale branches that have already been merged into the main branch.
.fn:g:clean-br () {

  for k in $(git branch --format="%(refname:short)" --merged main); do 
    if [[ $(git log -1 --since='9 month ago' -s $k |wc -l)==0 ]]; then
      git log -1 --date=relative --oneline --pretty="%C(red)[Date: %ad]%C(cyan) <=> Last Commit: %C(yellow)%s" $k
      git branch -d $k
      git push --delete origin $k
      echo "\n"
    fi
  done
  
}
